{"version":3,"sources":["calculator.jsx","index.js"],"names":["Calculator","state","principle","years","months","interestRate","monthly","interest","total","calculate","bind","monthlyRate","this","amortizedInterest","Number","setState","balance","interestSum","i","input","e","isNaN","currentTarget","value","field","className","type","onChange","handleInput","renderErrors","onClick","toFixed","React","Component","document","addEventListener","root","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.95b73e11.chunk.js","sourcesContent":["import React from 'react';\nimport './reset.css';\nimport './calculator.css';\n\nclass Calculator extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      principle: 5000,\n      years: 5,\n      months: 60,\n      interestRate: 4.5,\n      monthly: 93.22,\n      interest: 592.91,\n      total: 5592.91\n    }\n    this.calculate = this.calculate.bind(this);\n  }\n\n  calculate(){\n    const rate = this.state.interestRate / 100;\n    const monthlyRate = rate / 12;\n    const principle = this.state.principle;\n    const months = this.state.months;\n    const numerator = monthlyRate * (1 + monthlyRate) ** months;\n    const denominator = ((1 + monthlyRate) ** months) - 1;\n    const monthly = principle * (numerator / denominator);\n    const interest = this.amortizedInterest(principle, months, monthlyRate, monthly);\n    const total = Number(principle) + Number(interest);\n\n    this.setState({\n      total: total,\n      interest: interest,\n      monthly: monthly\n    })\n  }\n\n  amortizedInterest(principle, months, monthlyRate, monthly){\n    let balance = principle;\n    let interestSum = 0;\n    for (let i = 0; i < months; i++) {\n      const interest = balance * monthlyRate;\n      interestSum += interest;\n      balance -= (monthly - interest);\n    }\n    return (interestSum);\n  }\n\n  handleInput(input) {\n    if (input === 'years') {\n      return (e) => {\n        if (isNaN(e.currentTarget.value)) {\n          this.setState({\n            [input]: e.currentTarget.value\n          });\n        } else {\n          this.setState({ \n            [input]: e.currentTarget.value,\n            months: e.currentTarget.value * 12\n          });\n        }\n      }\n    } else if (input === 'months') {\n      return (e) => {\n        if (isNaN(e.currentTarget.value)) {\n          this.setState({\n            [input]: e.currentTarget.value\n          });\n        } else {\n          this.setState({\n            [input]: e.currentTarget.value,\n            years: e.currentTarget.value / 12\n          });\n        }\n      }\n    } else {\n      return (e) => {\n        this.setState({ [input]: e.currentTarget.value });\n      }\n    }\n  }\n\n  renderErrors(field){\n    if (isNaN(field)) {\n      return(\n        <div className=\"input-error\">\n          <p>Please enter a valid number.</p>\n        </div>\n      )\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"page\">\n        <h1>Loan Calculator</h1>\n        <div className=\"calculator\">\n          <div className=\"input-fields\">\n            <div className=\"amount-input\">\n              <h2>Loan Amount</h2>\n              <input \n                type=\"text\"\n                value={this.state.principle}\n                onChange={this.handleInput('principle')}\n              />\n              {this.renderErrors(this.state.principle)}\n            </div>\n            <div className=\"rate-input\">\n              <h2>Interest Rate Per Year</h2>\n              <input \n                type=\"text\" \n                value={this.state.interestRate}\n                onChange={this.handleInput('interestRate')}\n              />\n              {this.renderErrors(this.state.interestRate)}\n            </div>\n            <div className=\"loan-term\">\n              <h2>Loan Term</h2>\n              <div className=\"years-input\">\n                <h3>Years</h3>\n                <input \n                  type=\"text\"\n                  value={this.state.years}\n                  onChange={this.handleInput('years')}\n                />\n                {this.renderErrors(this.state.years)}\n              </div>\n              <div className=\"months-input\">\n                <h3>Months</h3>\n                <input \n                  type=\"text\"\n                  value={this.state.months}\n                  onChange={this.handleInput('months')}\n                />\n                {this.renderErrors(this.state.months)}\n              </div>\n            </div>\n            <button onClick={this.calculate}>\n              Calculate\n            </button>\n          </div>\n          <div className=\"output-fields\">\n            <div className=\"monthly-output\">\n              <h2>Monthly Payments</h2>\n              <p>{this.state.monthly.toFixed(2)}</p>\n            </div>\n            <div className=\"output-totals\">\n              <div className=\"interest-output\">\n                <h3>Total Interest Paid</h3>\n                <p>{this.state.interest.toFixed(2)}</p>\n              </div>\n              <div className=\"total-output\">\n                <h3>Total Paid</h3>\n                <p>{Number(this.state.total).toFixed(2)}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n};\n\nexport default Calculator;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Calculator from './calculator';\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const root = document.getElementById(\"root\");\n  ReactDOM.render(<Calculator />, root);\n});"],"sourceRoot":""}